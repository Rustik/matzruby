#! /usr/local/bin/ruby

$".push 'mkmf.rb'

if ARGV[0] == 'static'
  $force_static = true
  ARGV.shift
elsif ARGV[0] == 'install'
  $install = true
  $destdir = ARGV[1] || ''
  ARGV.shift
elsif ARGV[0] == 'clean'
  $clean = true
  ARGV.shift
end

SRC_EXT = ["c", "cc", "m", "cxx", "cpp", "C"]
$extlist = []

$cache_mod = false
$lib_cache = {}
$func_cache = {}
$hdr_cache = {}

$top_srcdir = File.expand_path("..")
$topdir = File.expand_path("..")
$ruby_inc = $top_srcdir

load "#{$top_srcdir}/lib/find.rb"

#$dllopt = '-MD'
$dllopt = ''

if File.exist?("config.cache") then
  f = open("config.cache", "r")
  while f.gets
    case $_
    when /^lib: ([\w_]+) (yes|no)/
      $lib_cache[$1] = $2
    when /^func: ([\w_]+) (yes|no)/
      $func_cache[$1] = $2
    when /^hdr: (.+) (yes|no)/
      $hdr_cache[$1] = $2
    end
  end
  f.close
end

def older(file1, file2)
  if !File.exist?(file1) then
    return true
  end
  if !File.exist?(file2) then
    return false
  end
  if File.mtime(file1) < File.mtime(file2)
    return true
  end
  return false
end

CFLAGS = ""
LINK = "cl -o conftest.exe %s  conftest.c %s %s"
CPP = "cl -E  -I#{$ruby_inc} -I#{$ruby_inc}/missing -I#{$ruby_inc}/win32 -I. %s conftest.c"
$null = open("nul", "w")

$orgerr = $stderr.dup
$orgout = $stdout.dup
def xsystem command
  if $DEBUG
    return system(command)
  end
  $stderr.reopen($null) 
  $stdout.reopen($null) 
  r = system(command)
  $stderr.reopen($orgerr)
  $stdout.reopen($orgout)
  return r
end

def try_link0(src, opt="")
  cfile = open("conftest.c", "w")
  cfile.print src
  cfile.close
  xsystem(format(LINK, $CFLAGS, $LDFLAGS, opt))
end

def try_link(src, opt="")
  begin
    try_link0(src, opt)
  ensure
    system "rm -f conftest*"
  end
end

def try_cpp(src, opt=$CFLAGS)
  cfile = open("conftest.c", "w")
  cfile.print src
  cfile.close
  begin
    xsystem(format(CPP, opt))
  ensure
    system "rm -f conftest*"
  end
end

def egrep_cpp(pat, src, opt=$CFLAGS)
  cfile = open("conftest.c", "w")
  cfile.print src
  cfile.close
  begin
    xsystem(format(CPP+"|egrep #{pat}", opt))
  ensure
    system "rm -f conftest*"
  end
end

def try_run(src, opt="")
  begin
    if try_link0(src, opt)
      if xsystem("./conftest")
	true
      else
	false
      end
    else
      nil
    end
  ensure
    system "rm -f conftest*"
  end
end

def install_rb(mfile, srcdir = nil)
  libdir = "lib"
  libdir = srcdir + "/" + libdir if srcdir
  path = []
  dir = []
  Find.find(libdir) do |f|
    next unless /\.rb$/ =~ f
    f = f[libdir.length+1..-1]
    path.push f
    dir |= File.dirname(f)
  end
  for f in dir
    next if f == "."
    mfile.printf "\t@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(pkglibdir)/%s\n", f
  end
  for f in path
    mfile.printf "\t@$(RUBY) -r ftools -e 'File::install(ARGV[0], ARGV[1], 0644, true)' $(srcdir)/lib/%s $(DESTDIR)$(pkglibdir)/%s\n", f, f
  end
end

def append_library(libs, lib)
  if /mswin32/ =~ RUBY_PLATFORM
    lib + ".lib " + libs
  else
    "-l" + lib + " " + libs
  end
end

def have_library(lib, func="main")
  #print format("have_library(%s, %s)\n", lib, func)
  if $lib_cache[lib]
    if $lib_cache[lib] == "yes"
      $libs = append_library($libs, lib)
      return true
    else
      return false
    end
  end

  if func && func != ""
    libs = append_library($libs, lib)
    #print "libs=#{libs}\n"
    r = try_link(<<"SRC", libs)
#include <windows.h>
#include <winsock.h>
int main() { return 0; }
int t() { #{func}(); return 0; }
SRC
    unless r
      r = try_link(<<"SRC", libs)
#include <windows.h>
#include <winsock.h>
int main() { return 0; }
int t() { void ((*p)()); p = (void ((*)()))#{func}; return 0; }
SRC
    end
    unless r
      #print "fail : #{libs}\n"
      $lib_cache[lib] = 'no'
      $cache_mod = true
      return false
    end
  end

  $libs = libs
  $lib_cache[lib] = 'yes'
  $cache_mod = true
  return true
end

def have_func(func)
  if $func_cache[func]
    if $func_cache[func] == "yes"
      $defs.push(format("-DHAVE_%s", func.upcase))
      return true
    else
      return false
    end
  end

  libs = $libs

  #print "libs=#{libs}\n"
  r = try_link(<<"SRC", libs)
#include <windows.h>
#include <winsock.h>
int main() { return 0; }
int t() { #{func}(); return 0; }
SRC
  unless r
    try_link(<<"SRC", libs)
#include <windows.h>
#include <winsock.h>
int main() { return 0; }
int t() { void ((*p)()); p = (void ((*)()))#{func}; return 0; }
SRC
  end
  unless r
    $func_cache[func] = 'no'
    $cache_mod = true
    return false
  end
  $defs.push(format("-DHAVE_%s", func.upcase))
  $func_cache[func] = 'yes'
  $cache_mod = true
  return true
end

def have_header(header)
  if $hdr_cache[header]
    if $hdr_cache[header] == "yes"
      header.tr!("a-z./\055", "A-Z___")
      $defs.push(format("-DHAVE_%s", header))
      return true
    else
      return false
    end
  end

  unless try_cpp(<<"SRC")
#include <#{header}>
SRC
    $hdr_cache[header] = 'no'
    $cache_mod = true
    return false
  end
  $hdr_cache[header] = 'yes'
  header.tr!("a-z./\055", "A-Z___")
  $defs.push(format("-DHAVE_%s", header))
  $cache_mod = true
  return true
end

def arg_config(config, default=nil)
  return default if /mswin32/i =~ PLATFORM
  unless defined? $configure_args
    $configure_args = {}
    for arg in ENV["CONFIGURE_ARGS"].split
      next unless /^--/ =~ arg
      if /=/ =~ arg
	$configure_args[$`] = $'
      else
	$configure_args[arg] = true
      end
    end
  end
  $configure_args.fetch(config, default)
end

def with_config(config, default=nil)
  unless /^--with-/ =~ config
    config = '--with-' + config
  end
  arg_config(config, default)
end

def enable_config(config, default=nil)
  if arg_config("--enable-"+config, default)
    true
  elsif arg_config("--disable-"+config, false)
    false
  else
    default
  end
end

def create_header()
  if $defs.length > 0
    hfile = open("extconf.h", "w")
    for line in $defs
      line =~ /^-D(.*)/
      hfile.printf "#define %s 1\n", $1
    end
    hfile.close
  end
end

def create_makefile(target)
  $target = target

  if $libs != ""
    libs = $libs.split
    for lib in libs
      lib.sub!(/(.*)/, '"\1.lib"') if /.lib$/ !~ lib
    end
    $defs.push(format("-DEXTLIB='%s'", libs.join(",")))
  end

  mfile = open("Makefile", "w")
  mfile.printf "\
SHELL = $(COMPSEC)

#### Start of system configuration section. ####

srcdir = .
VPATH = .

topdir = #{$topdir}
hdrdir = #{$top_srcdir}

CC = cl

CFLAGS   = %s -I#{$ruby_inc} -I#{$ruby_inc}/missing -I. -O -DNT %s #{CFLAGS} #{$CFLAGS} %s
DLDFLAGS = 
LDSHARED = cl -LD
RUBYLIB  = ../../ruby.lib
", if $static then "" else "-fpic" end, $dllopt, $defs.join(" ")

  if $force_static
    print "static\n"
  else
    print "non static\n"
  end

  mfile.printf "\

libdir = /usr/local/lib
pkglibdir = $(libdir)/ruby/1.3
archdir = $(pkglibdir)/i386-mswin32

#### End of system configuration section. ####
"
  mfile.printf "LOCAL_LIBS = %s\n", $LOCAL_LIBS unless $LOCAL_LIBS == ""
  mfile.printf "LIBS = %s\n", $libs
  mfile.printf "OBJS = "
  if !$objs then
    $objs = []
    for f in Dir["*.{#{SRC_EXT.join(%q{,})}}"]
      f = File.basename(f)
      f.sub!(/(#{SRC_EXT.join(%q{|})})$/, $OBJEXT)
      $objs.push f
    end
  end
  mfile.printf $objs.join(" ")
  mfile.printf "\n"

  mfile.printf "\
TARGET = %s
DLLIB = $(TARGET).%s
DEFFILE = $(TARGET).def

RUBY = ..\\..\\miniruby.exe

all:            $(DLLIB)

clean:;         @rm -f *.#{$OBJEXT} *.lib *.exp vc*.pdb *.bak *.def
		@rm -f Makefile extconf.h conftest.*

realclean:      clean

install:
	@$(RUBY) -r ftools -e 'File::makedirs(*ARGV)' $(DESTDIR)$(libdir) $(DESTDIR)$(pkglibdir) $(DESTDIR)$(archdir)
", target,
    if $force_static then "lib" else "dll" end

  unless $static
    mfile.printf "\
	@$(RUBY) -r ftools -e 'File::install(ARGV[0], ARGV[1], 0555, true)' $(DLLIB) $(DESTDIR)$(archdir)/$(DLLIB)
"
  end
  install_rb(mfile, $srcdir)

  if $force_static
    mfile.printf "\
$(DLLIB): $(OBJS)
	lib /OUT:$(DLLIB) $(OBJS)
"
  else
    mfile.printf "\
$(DEFFILE):
	echo $(DEFFILE)

$(DLLIB): $(OBJS) $(DEFFILE)
	$(LDSHARED) -o $(DLLIB) $(OBJS) $(RUBYLIB) -link /DEF:$(DEFFILE)
"
  end

  if File.exist?("depend")
    dfile = open("depend", "r")
    mfile.printf "###\n"
    while line = dfile.gets()
      mfile.printf "%s", line.gsub(/\.o/, ".#{$OBJEXT}")
    end
    dfile.close
  end
  mfile.close
  unless $static
    if !File.exist?("#{target}.def")
      create_def(target)
    end
  end
end

#template of .def file.
def create_def(basename)
  defname = sprintf("%s.def", basename)
  f = open(defname, "w")
  f.printf "\
LIBRARY %s.dll
CODE LOADONCALL
DATA LOADONCALL
DESCRIPTION 'win32 %s.dll'
EXPORTS

	Init_%s
", basename, basename, basename
  f.close

end

def extmake(target)
  if $force_static or $static_ext[target]
    $static = target
  else
    $static = false
  end

  unless $install or $clean
    return if $nodynamic and not $static
  end

  $OBJEXT = 'obj'
  $objs = nil
  $local_flags = ""
  $libs = ""
  $LOCAL_LIBS = ""		# to be assigned in extconf.rb
  $CFLAGS = ""
  $LDFLAGS = ""

  begin
    Dir.chdir target
    $target = target
    unless $install or $clean
      if $static_ext.size > 0 ||
	!File.exist?("./Makefile") ||
	older("./Makefile", "../Setup") ||
	older("./Makefile", "../extmk.rb") ||
	older("./Makefile", "./extconf.rb")
      then
	$defs = []
	if File.exist?("extconf.rb")
	  load "extconf.rb"
	else
	  create_makefile(target)
	end
      end
    end
    if File.exist?("./Makefile")
      if $static
	$extlist.push [$static,$target]
      end
      if $install
	system "#{$make} install DESTDIR=#{$destdir}"
      elsif $clean
	system "#{$make} clean"
      else
	system "#{$make} all" or exit
      end
    end
    if $static
      $extlibs ||= ""
      $extlibs += " " + $LDFLAGS unless $LDFLAGS == ""
      $extlibs += " " + $libs unless $libs == ""
      $extlibs += " " + $LOCAL_LIBS unless $LOCAL_LIBS == ""
    end
  ensure
    system "rm -f conftest*"
    Dir.chdir ".."
  end
end

$make = ENV["MAKE"]
$make ||= with_config("make-prog", "nmake -nologo")

# get static-link modules
$static_ext = {}
if File.file? "./Setup"
  f = open("./Setup") 
  while f.gets()
    $_.chop!
    sub!(/#.*$/, '')
    next if /^\s*$/
    #print $_, "\n"

    if /^option +nodynamic/
      $nodynamic = true
      next
    end
    $static_ext[$_.split[0]] = true
  end
  f.close
end

for d in Dir["*"]
  File.directory?(d) || next
  File.file?(d + "/MANIFEST") || next
  
  d = $1 if d =~ /\/([\/]*)$/
  if $install
    print "installing ", d, "\n"
  elsif $clean
    print "cleaning ", d, "\n"
  else
    print "compiling ", d, "\n"
  end
  extmake(d)
end

if $cache_mod
  f = open("config.cache", "w")
  for k,v in $lib_cache
    f.printf "lib: %s %s\n", k, v
  end
  for k,v in $func_cache
    f.printf "func: %s %s\n", k, v
  end
  for k,v in $hdr_cache
    f.printf "hdr: %s %s\n", k, v
  end
  f.close
end

exit if $install or $clean
$extinit = "" unless $extinit

ruby = "ruby.exe"
miniruby = "miniruby.exe"

$extobjs = "" unless $extobjs
if $extlist.size > 0
  for s,t in $extlist
    f = format("%s/%s.lib", s, t)
    if File.exist?(f)
      $extinit += format("\
\tInit_%s();\n\
\trb_provide(\"%s.so\");\n\
", t, t)
      $extobjs += "ext/"
      $extobjs += f
      $extobjs += " "
    else
      false
    end
  end

  if older("extinit.c", "Setup")
    f = open("extinit.c", "w")
    f.printf "void Init_ext() {\n"
    f.printf $extinit
    f.printf "}\n"
    f.close
  end
  if older("extinit.#{$OBJEXT}", "extinit.c")
    cmd = "cl -Zi -O -I. -c extinit.c"
    print cmd, "\n"
    system cmd or exit 1
  end

  Dir.chdir ".."

  if older(ruby, "ext/Setup") or older(ruby, miniruby)
    system("rm -f #{ruby}")
  end

  $extobjs = "ext/extinit.#{$OBJEXT} " + $extobjs
  #$extlibs = ""
  #print "EXTLIBS=#{$extlibs}\n"
  $extlibs.gsub!("-L/usr/local/lib", "") if $extlibs
  $extlibs.gsub!(" +", " ") if $extlibs
  #print "EXTLIBS=#{$extlibs}\n"

  system format(%[#{$make} #{ruby} EXTOBJS="%s" EXTLIBS="%s"], $extobjs, $extlibs)
else
  Dir.chdir ".."
  if older(ruby, miniruby)
    system("rm -f #{ruby}")
    system("#{$make} #{ruby}")
  end
end
#Local variables:
# mode: ruby
#end:
